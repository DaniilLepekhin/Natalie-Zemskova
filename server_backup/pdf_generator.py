"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Å–∏–≤—ã—Ö PDF –æ—Ç—á–µ—Ç–æ–≤
"""

import os
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_JUSTIFY
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, PageBreak,
    Table, TableStyle, Image
)
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import re


def replace_emoji_for_pdf(text):
    """–ó–∞–º–µ–Ω–∞ —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF"""
    emoji_map = {
        'üî¥': '[1]',  # –ö—Ä–∞—Å–Ω–∞—è —á–∞–∫—Ä–∞
        'üü†': '[2]',  # –û—Ä–∞–Ω–∂–µ–≤–∞—è —á–∞–∫—Ä–∞
        'üü°': '[3]',  # –ñ—ë–ª—Ç–∞—è —á–∞–∫—Ä–∞
        'üíö': '[4]',  # –ó–µ–ª—ë–Ω–∞—è —á–∞–∫—Ä–∞
        'üíô': '[5]',  # –ì–æ–ª—É–±–∞—è —á–∞–∫—Ä–∞
        'üíú': '[6]',  # –§–∏–æ–ª–µ—Ç–æ–≤–∞—è —á–∞–∫—Ä–∞
        'ü§ç': '[7]',  # –ë–µ–ª–∞—è —á–∞–∫—Ä–∞
        '‚ú®': '*',
        'üîÆ': '~',
        'üåø': '~',
        'üí´': '*',
        'üïä': '~',
        'üå∏': '~',
        'üîπ': '‚Ä¢',
    }

    for emoji, replacement in emoji_map.items():
        text = text.replace(emoji, replacement)

    return text


def register_fonts():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"""
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã macOS
        pdfmetrics.registerFont(TTFont('DejaVuSans', '/System/Library/Fonts/Supplemental/DejaVuSans.ttf'))
        pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', '/System/Library/Fonts/Supplemental/DejaVuSans-Bold.ttf'))
        return True
    except:
        try:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è Linux
            pdfmetrics.registerFont(TTFont('DejaVuSans', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf'))
            pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', '/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf'))
            return True
        except:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            return False


def create_custom_styles(has_custom_fonts=False):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    styles = getSampleStyleSheet()

    font_name = 'DejaVuSans' if has_custom_fonts else 'Helvetica'
    font_name_bold = 'DejaVuSans-Bold' if has_custom_fonts else 'Helvetica-Bold'

    # –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
    styles.add(ParagraphStyle(
        name='CustomTitle',
        parent=styles['Heading1'],
        fontName=font_name_bold,
        fontSize=18,
        textColor=colors.HexColor('#4A148C'),
        spaceAfter=30,
        alignment=TA_CENTER,
        leading=22
    ))

    # –°—Ç–∏–ª—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
    styles.add(ParagraphStyle(
        name='CustomHeading',
        parent=styles['Heading2'],
        fontName=font_name_bold,
        fontSize=14,
        textColor=colors.HexColor('#6A1B9A'),
        spaceAfter=12,
        spaceBefore=16,
        leading=18
    ))

    # –°—Ç–∏–ª—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    styles.add(ParagraphStyle(
        name='CustomBody',
        parent=styles['BodyText'],
        fontName=font_name,
        fontSize=11,
        textColor=colors.HexColor('#212121'),
        alignment=TA_JUSTIFY,
        spaceAfter=10,
        leading=16
    ))

    # –°—Ç–∏–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
    styles.add(ParagraphStyle(
        name='TransformPhrase',
        parent=styles['BodyText'],
        fontName=font_name,
        fontSize=11,
        textColor=colors.HexColor('#1565C0'),
        alignment=TA_LEFT,
        spaceAfter=8,
        spaceBefore=8,
        leftIndent=20,
        leading=16,
        backColor=colors.HexColor('#E3F2FD')
    ))

    # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    styles.add(ParagraphStyle(
        name='RequestStyle',
        parent=styles['BodyText'],
        fontName=font_name,
        fontSize=12,
        textColor=colors.HexColor('#C62828'),
        alignment=TA_CENTER,
        spaceAfter=20,
        spaceBefore=10,
        leading=16
    ))

    return styles


def parse_analysis_sections(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–µ–∫—Ü–∏–∏"""
    sections = {}

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: —Ç–æ—á–∫–∞ –∏ —Å–∫–æ–±–∫–∞)
    patterns = {
        'title': r'–°–∫–∞–Ω–µ—Ä –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è.*?–¥–ª—è\s+(\w+)',
        'request': r'\*\*–ó–∞–ø—Ä–æ—Å:\*\*\s*\n(.*?)(?=\n\*\*|$)',
        'contracts': r'\*\*1[\.\)]\s*–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ –ø–æ–¥–∫–ª—é—á–∫–∏\*\*\s*\n(.*?)(?=\n\*\*|$)',
        'layers': r'\*\*2[\.\)]\s*–°–ª–æ–∏.*?\*\*\s*\n(.*?)(?=\n\*\*|$)',
        'energy': r'\*\*3[\.\)]\s*–ü–æ—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —Ü–µ–Ω—Ç—Ä–∞–º\*\*\s*\n(.*?)(?=\n\*\*|$)',
        'programs': r'\*\*4[\.\)]\s*–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.*?\*\*\s*\n(.*?)(?=\n\*\*|$)',
        'lessons': r'\*\*5[\.\)]\s*–ì–ª–∞–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –¥—É—à–∏\*\*\s*\n(.*?)(?=\n\*\*|$)',
        'family': r'\*\*6[\.\)]\s*–†–æ–¥–æ–≤—ã–µ –≤–ª–∏—è–Ω–∏—è\*\*\s*\n(.*?)(?=\n\*\*|$)',
        'past_lives': r'\*\*7[\.\)]\s*–°–≤—è–∑–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∂–∏–∑–Ω–µ–π\*\*\s*\n(.*?)(?=\n\*\*|$)',
        'changes': r'\*\*8[\.\)]\s*–ß—Ç–æ –≤–∞–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å\*\*\s*\n(.*?)(?=\n\*\*|$)',
        'phrases': r'\*\*9[\.\)]\s*–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã\*\*\s*\n(.*?)(?=\n\*\*|\nüí´|$)',
        'recommendation': r'\*\*10[\.\)]\s*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥\*\*\s*\n(.*?)(?=\n\*\*|$)',
        'archetype': r'\*\*11[\.\)]\s*–ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.*?\*\*\s*üïä?\s*\n(.*?)(?=\nüí´|\n\*\*|$)',
        'message': r'üí´\s*\*\*–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ\*\*\s*\n(.*?)$',
    }

    for key, pattern in patterns.items():
        match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
        if match:
            if key == 'title':
                sections[key] = match.group(1)
            else:
                sections[key] = match.group(1).strip()

    return sections


def create_analysis_pdf(analysis_text, username, request_text):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞

    Args:
        analysis_text: –¢–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç GPT
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        request_text: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É PDF —Ñ–∞–π–ª—É
    """
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è PDF
    os.makedirs('generated_pdfs', exist_ok=True)

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    pdf_filename = f'generated_pdfs/scanner_{username}_{timestamp}.pdf'

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
    has_custom_fonts = register_fonts()

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc = SimpleDocTemplate(
        pdf_filename,
        pagesize=A4,
        rightMargin=2*cm,
        leftMargin=2*cm,
        topMargin=2*cm,
        bottomMargin=2*cm
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    styles = create_custom_styles(has_custom_fonts)

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    story = []

    # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è PDF
    analysis_text_clean = replace_emoji_for_pdf(analysis_text)

    # –ü–∞—Ä—Å–∏–º –∞–Ω–∞–ª–∏–∑
    sections = parse_analysis_sections(analysis_text_clean)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = Paragraph(
        f"–°–∫–∞–Ω–µ—Ä –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è –ø–æ –ú–µ—Ç–∞-–ú–µ—Ç–æ–¥—É<br/>–¥–ª—è {username}",
        styles['CustomTitle']
    )
    story.append(title)
    story.append(Spacer(1, 0.5*cm))

    # –î–∞—Ç–∞
    date_text = Paragraph(
        f"<i>–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y')}</i>",
        styles['CustomBody']
    )
    story.append(date_text)
    story.append(Spacer(1, 0.8*cm))

    # –ó–∞–ø—Ä–æ—Å
    request_header = Paragraph("–ó–∞–ø—Ä–æ—Å:", styles['CustomHeading'])
    story.append(request_header)
    request_para = Paragraph(
        f"<i>{request_text}</i>",
        styles['RequestStyle']
    )
    story.append(request_para)
    story.append(Spacer(1, 0.5*cm))

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    section_titles = {
        'contracts': '1. –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ –ø–æ–¥–∫–ª—é—á–∫–∏',
        'layers': '2. –°–ª–æ–∏',
        'energy': '3. –ü–æ—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —Ü–µ–Ω—Ç—Ä–∞–º',
        'programs': '4. –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
        'lessons': '5. –ì–ª–∞–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –¥—É—à–∏',
        'family': '6. –†–æ–¥–æ–≤—ã–µ –≤–ª–∏—è–Ω–∏—è',
        'past_lives': '7. –°–≤—è–∑–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∂–∏–∑–Ω–µ–π',
        'changes': '8. –ß—Ç–æ –≤–∞–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å',
        'phrases': '9. –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã',
        'recommendation': '10. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥',
        'archetype': '11. –ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ üïä',
        'message': 'üí´ –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ',
    }

    for key, title in section_titles.items():
        if key in sections and sections[key]:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            section_title = Paragraph(title, styles['CustomHeading'])
            story.append(section_title)

            # –ö–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏
            content = sections[key]

            # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
            if key == 'phrases':
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
                phrases = content.split('\n')
                for phrase in phrases:
                    if phrase.strip():
                        phrase_para = Paragraph(phrase.strip(), styles['TransformPhrase'])
                        story.append(phrase_para)

            # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∞–∫—Ä (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
            elif key == 'energy':
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —ç–º–æ–¥–∑–∏ —á–∞–∫—Ä –∏–ª–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                lines = content.split('\n')
                current_para = []

                for line in lines:
                    line = line.strip()
                    if not line:
                        continue

                    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞ —á–∞–∫—Ä—ã [1]-[7] –∏–ª–∏ –º–∞—Ä–∫–µ—Ä–∞
                    is_chakra_line = (
                        line.startswith('[1]') or line.startswith('[2]') or
                        line.startswith('[3]') or line.startswith('[4]') or
                        line.startswith('[5]') or line.startswith('[6]') or
                        line.startswith('[7]') or line.startswith('–ß–∞–∫—Ä–∞') or
                        line.startswith('-') or line.startswith('‚Ä¢')
                    )

                    if is_chakra_line:
                        # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏—Å—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
                        if current_para:
                            para = Paragraph('<br/>'.join(current_para), styles['CustomBody'])
                            story.append(para)
                            current_para = []
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
                        current_para.append(line)
                    else:
                        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                        if current_para:
                            current_para[-1] += ' ' + line
                        else:
                            current_para.append(line)

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è
                if current_para:
                    para = Paragraph('<br/>'.join(current_para), styles['CustomBody'])
                    story.append(para)

            # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º, –∏–∑–º–µ–Ω–µ–Ω–∏–π
            elif key in ['programs', 'changes']:
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
                lines = content.split('\n')
                items = []

                for line in lines:
                    line = line.strip()
                    if not line:
                        continue

                    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞—Ä–∫–µ—Ä–∞ –∏–ª–∏ –∫–∞–≤—ã—á–∫–∏
                    if line.startswith(('-', '‚Ä¢', '"', '‚Äì', '‚Äî')):
                        items.append(line)
                    elif items:
                        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—É–Ω–∫—Ç–∞
                        items[-1] += ' ' + line
                    else:
                        items.append(line)

                if items:
                    para = Paragraph('<br/>'.join(items), styles['CustomBody'])
                    story.append(para)

            else:
                # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º
                paragraphs = content.split('\n\n')
                for para_text in paragraphs:
                    para_text = para_text.strip()
                    if para_text:
                        # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                        para_text = para_text.replace('\n', ' ')
                        para = Paragraph(para_text, styles['CustomBody'])
                        story.append(para)

            story.append(Spacer(1, 0.3*cm))

    # –§—É—Ç–µ—Ä
    story.append(Spacer(1, 1*cm))
    footer_line = Paragraph(
        "<i>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</i>",
        styles['CustomBody']
    )
    story.append(footer_line)

    footer_text = Paragraph(
        "<i>–†–∞–±–æ—Ç–∞–π —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.<br/>"
        "–ü—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞–π –∏—Ö –≤—Å–ª—É—Ö –∏–ª–∏ –ø—Ä–æ —Å–µ–±—è, —á—É–≤—Å—Ç–≤—É—è –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ.<br/>"
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å. üôè</i>",
        styles['CustomBody']
    )
    story.append(footer_text)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    doc.build(story)

    return pdf_filename


# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    test_analysis = """
**–°–∫–∞–Ω–µ—Ä –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è –ø–æ –ú–µ—Ç–∞-–ú–µ—Ç–æ–¥—É –¥–ª—è –¢–µ—Å—Ç–æ–≤—ã–π**

**–ó–∞–ø—Ä–æ—Å:**
–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF

**1) –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ –ø–æ–¥–∫–ª—é—á–∫–∏**
–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ —Å–∞–º–æ–æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ.

**9) –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã**
–Ø –ø—Ä–∏–∑–Ω–∞—é –∏ –¥–∞—é –º–µ—Å—Ç–æ –≤—Å–µ–º –æ–ø—ã—Ç–∞–º –≤ —ç—Ç–æ–π –∂–∏–∑–Ω–∏.
–Ø –ª—é–±–ª—é –Ω–∞—Å —Ç–∞–∫, –∫–∞–∫ –ë–æ–≥ –Ω–∞—Å –ª—é–±–∏—Ç.
–û—Ç–∫—Ä—ã–≤–∞—é—Å—å –Ω–æ–≤–æ–º—É –∏ –¥–∞—é –º–µ—Å—Ç–æ –Ω–æ–≤–æ–º—É.

**10) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥**
–†–∞–±–æ—Ç–∞—Ç—å —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
"""

    pdf_path = create_analysis_pdf(test_analysis, "–¢–µ—Å—Ç", "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    print(f"PDF —Å–æ–∑–¥–∞–Ω: {pdf_path}")
