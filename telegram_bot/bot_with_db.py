"""
Telegram Bot –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –ø–æ –ú–µ—Ç–∞-–ú–µ—Ç–æ–¥—É + PostgreSQL
–í—Å–µ –∞–Ω–∞–ª–∏–∑—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
"""

import os
import logging
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from openai import OpenAI
from pdf_generator_with_background import generate_pdf
from config import TELEGRAM_TOKEN, OPENAI_API_KEY, OPENAI_MODEL
from database import get_db
from metamethod_analyzer import analyze_with_metamethod

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = get_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_PHOTO, WAITING_FOR_REQUEST = range(2)

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - —á–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
with open('prompt_final.txt', 'r', encoding='utf-8') as f:
    SYSTEM_PROMPT = f.read()


class UserSession:
    """–•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self):
        self.photo_path = None
        self.request_text = None
        self.username = None
        self.start_time = None


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name or "–î—Ä—É–≥"
    telegram_username = update.effective_user.username
    last_name = update.effective_user.last_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.create_or_update_user(
        user_id=user_id,
        username=telegram_username,
        first_name=username,
        last_name=last_name
    )

    user_sessions[user_id] = UserSession()
    user_sessions[user_id].username = username
    user_sessions[user_id].start_time = time.time()

    welcome_message = f"""–ü—Ä–∏–≤–µ—Ç, {username}! üëã

–Ø ‚Äî –±–æ—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –ø–æ –ú–µ—Ç–∞-–ú–µ—Ç–æ–¥—É.

<b>–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:</b>
1. –¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –º–Ω–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ
2. –ü–∏—à–µ—à—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å–µ–±–µ
3. –Ø —Å–æ–∑–¥–∞—é –¥–ª—è —Ç–µ–±—è –≥–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä —á–µ—Ä–µ–∑ GPT-4o
4. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –∫—Ä–∞—Å–∏–≤—ã–π PDF —Å –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏

<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ –•–æ—á—É –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞
‚Ä¢ –ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ
‚Ä¢ –°—Ç—Ä–∞—Ö –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –∏ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å—Å—è

<b>–ù–∞—á–Ω—ë–º?</b>
–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é-–∑–∞–ø—Ä–æ—Å–æ–º).
"""

    await update.message.reply_text(welcome_message, parse_mode='HTML')
    return WAITING_FOR_PHOTO


async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession()

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo_file = await update.message.photo[-1].get_file()

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('user_photos', exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_path = f'user_photos/{user_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.jpg'
    await photo_file.download_to_drive(photo_path)

    user_sessions[user_id].photo_path = photo_path

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ (caption)
    caption = update.message.caption
    if caption and len(caption.strip()) > 10:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –ø–æ–¥–ø–∏—Å–∏
        user_sessions[user_id].request_text = caption.strip()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º
        processing_msg = await update.message.reply_text(
            "‚è≥ –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑...\n"
            "–≠—Ç–æ –∑–∞–π–º—ë—Ç 30-60 —Å–µ–∫—É–Ω–¥.\n"
            "–Ø –ø—Ä–æ—Ö–æ–∂—É —á–µ—Ä–µ–∑ 5 —ç—Ç–∞–ø–æ–≤: –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Üí —Ä–æ–¥ ‚Üí —á–∞–∫—Ä—ã ‚Üí —Ñ—Ä–∞–∑—ã ‚Üí –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ üîÆ‚ú®"
        )

        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        return await process_analysis(update, context, processing_msg)
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç - –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. ‚ú®\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤, —Ö–æ—á—É –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞\n"
            "‚Ä¢ –•–æ—á—É –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n"
            "‚Ä¢ –•–æ—á—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±–æ—è—Ç—å—Å—è –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –ø—É–±–ª–∏—á–Ω–æ\n"
            "‚Ä¢ –ß—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –º–æ–π –±–∏–∑–Ω–µ—Å/–∑–¥–æ—Ä–æ–≤—å–µ/—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?"
        )
        return WAITING_FOR_REQUEST


async def process_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, processing_msg) -> int:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    user_id = update.effective_user.id

    try:
        start_time = time.time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ multi-step MetaMethod analyzer
        analysis_result, usage_info = await analyze_with_metamethod(
            user_sessions[user_id].request_text,
            user_sessions[user_id].username
        )

        processing_time = int(time.time() - start_time)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        safe_filename = f"analysis_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        pdf_path = generate_pdf(
            analysis_result,
            user_sessions[user_id].username,
            output_path=safe_filename
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        analysis_id = db.save_analysis(
            user_id=user_id,
            photo_path=user_sessions[user_id].photo_path,
            request_text=user_sessions[user_id].request_text,
            analysis_result=analysis_result,
            pdf_path=pdf_path,
            processing_time=processing_time,
            tokens_used=usage_info["total_tokens"],
            api_cost_usd=usage_info["cost_usd"],
            model_used=OPENAI_MODEL
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ base64 –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞
        db.save_photo_base64(analysis_id, user_sessions[user_id].photo_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        with open(pdf_path, 'rb') as pdf_file:
            await update.message.reply_document(
                document=pdf_file,
                filename=f"–°–∫–∞–Ω–µ—Ä_–ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è_{user_sessions[user_id].username}.pdf",
                caption="‚ú® –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –°–∫–∞–Ω–µ—Ä –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è –≥–æ—Ç–æ–≤!\n\n"
                        "–†–∞–±–æ—Ç–∞–π —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üôè"
            )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await processing_msg.delete()

        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞ (–≤—Å—ë —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î)
        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
            if os.path.exists(user_sessions[user_id].photo_path):
                os.remove(user_sessions[user_id].photo_path)
                logger.info(f"üóë –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {user_sessions[user_id].photo_path}")

            # –£–¥–∞–ª—è–µ–º PDF
            if os.path.exists(pdf_path):
                os.remove(pdf_path)
                logger.info(f"üóë –£–¥–∞–ª—ë–Ω PDF: {pdf_path}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="new_analysis")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –µ—â—ë –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑?",
            reply_markup=reply_markup
        )

        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ #{analysis_id} –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ {processing_time}—Å")

    except Exception as e:
        logger.error(f"Error during analysis: {e}")
        await processing_msg.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ /start\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )

    return ConversationHandler.END


async def receive_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
    user_id = update.effective_user.id

    if user_id not in user_sessions or not user_sessions[user_id].photo_path:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ! –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return ConversationHandler.END

    user_sessions[user_id].request_text = update.message.text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º
    processing_msg = await update.message.reply_text(
        "‚è≥ –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑...\n"
        "–≠—Ç–æ –∑–∞–π–º—ë—Ç 30-60 —Å–µ–∫—É–Ω–¥.\n"
        "–Ø –ø—Ä–æ—Ö–æ–∂—É —á–µ—Ä–µ–∑ 5 —ç—Ç–∞–ø–æ–≤: –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Üí —Ä–æ–¥ ‚Üí —á–∞–∫—Ä—ã ‚Üí —Ñ—Ä–∞–∑—ã ‚Üí –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ üîÆ‚ú®"
    )

    return await process_analysis(update, context, processing_msg)


async def analyze_with_gpt4o(photo_path: str, request_text: str, username: str) -> tuple:
    """
    –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT-4o Vision
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã)
    """
    import base64

    # –ß–∏—Ç–∞–µ–º —Ñ–æ—Ç–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    with open(photo_path, "rb") as image_file:
        base64_image = base64.b64encode(image_file.read()).decode('utf-8')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT-4o —Å Vision
    response = client.chat.completions.create(
        model=OPENAI_MODEL,
        messages=[
            {
                "role": "system",
                "content": SYSTEM_PROMPT
            },
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": f"–ß–µ–ª–æ–≤–µ–∫ –ø–æ –∏–º–µ–Ω–∏ {username} –¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –æ–±—Ä–∞–∑–æ–º –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞.\n\n–ó–∞–ø—Ä–æ—Å: {request_text}\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –æ–±—Ä–∞–∑ - —á—Ç–æ –ø–µ—Ä–µ–¥–∞—ë—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–∞–∫–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª—É–±–∏–Ω—ã –ø—Ä–∞–∫—Ç–∏–∫–∏."
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}",
                            "detail": "high"
                        }
                    }
                ]
            }
        ],
        max_tokens=4000,
        temperature=0.8,
    )

    result_text = response.choices[0].message.content
    tokens_used = response.usage.total_tokens

    return result_text, tokens_used


async def handle_text_without_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    if user_id in user_sessions:
        user_sessions[user_id].request_text = update.message.text

        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. ‚ú®\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

    return WAITING_FOR_PHOTO


async def handle_photo_after_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = update.effective_user.id

    if user_id not in user_sessions or not user_sessions[user_id].request_text:
        await update.message.reply_text(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ —Å /start"
        )
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo_file = await update.message.photo[-1].get_file()

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('user_photos', exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_path = f'user_photos/{user_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.jpg'
    await photo_file.download_to_drive(photo_path)

    user_sessions[user_id].photo_path = photo_path

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º
    processing_msg = await update.message.reply_text(
        "‚è≥ –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑...\n"
        "–≠—Ç–æ –∑–∞–π–º—ë—Ç 30-60 —Å–µ–∫—É–Ω–¥.\n"
        "–Ø –ø—Ä–æ—Ö–æ–∂—É —á–µ—Ä–µ–∑ 5 —ç—Ç–∞–ø–æ–≤: –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Üí —Ä–æ–¥ ‚Üí —á–∞–∫—Ä—ã ‚Üí —Ñ—Ä–∞–∑—ã ‚Üí –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ üîÆ‚ú®"
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    return await process_analysis(update, context, processing_msg)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "new_analysis":
        user_id = query.from_user.id
        username = query.from_user.first_name or "–î—Ä—É–≥"
        telegram_username = query.from_user.username
        last_name = query.from_user.last_name

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db.create_or_update_user(
            user_id=user_id,
            username=telegram_username,
            first_name=username,
            last_name=last_name
        )

        user_sessions[user_id] = UserSession()
        user_sessions[user_id].username = username
        user_sessions[user_id].start_time = time.time()

        await query.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω—ë–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑. üåü\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ."
        )
        return WAITING_FOR_PHOTO

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
    )
    return ConversationHandler.END


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = db.get_user_stats(user_id)
        recent = db.get_recent_analyses(limit=5)
        themes = db.get_theme_statistics()

        stats_text = f"""üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {user_stats['total_analyses']}
–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_stats['created_at'].strftime('%d.%m.%Y')}
–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_active'].strftime('%d.%m.%Y %H:%M')}

<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:</b>
"""
        for theme in themes[:5]:
            stats_text += f"‚Ä¢ {theme['theme']}: {theme['count']}\n"

        await update.message.reply_text(stats_text, parse_mode='HTML')

    except Exception as e:
        logger.error(f"Error in stats: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CallbackQueryHandler(button_callback, pattern='^new_analysis$')
        ],
        states={
            WAITING_FOR_PHOTO: [
                MessageHandler(filters.PHOTO, receive_photo),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_without_photo),
            ],
            WAITING_FOR_REQUEST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_request),
                MessageHandler(filters.PHOTO, handle_photo_after_request),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('stats', stats_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π PostgreSQL!")
    logger.info(f"üìä –ú–æ–¥–µ–ª—å: {OPENAI_MODEL}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
