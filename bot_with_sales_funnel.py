"""
Telegram Bot –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –ø–æ –ú–µ—Ç–∞-–ú–µ—Ç–æ–¥—É —Å –≤–æ—Ä–æ–Ω–∫–æ–π –ø—Ä–æ–¥–∞–∂
–í–∫–ª—é—á–∞–µ—Ç: –º–∏–Ω–∏-–∫–≤–∏–∑, –∞–≤—Ç–æ–¥–æ–∂–∏–º—ã, –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã
"""

import os
import logging
import time
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from openai import OpenAI
from pdf_generator_with_background import generate_pdf
from config import TELEGRAM_TOKEN, OPENAI_API_KEY, OPENAI_MODEL
from database import get_db
from metamethod_analyzer import analyze_with_metamethod
from sales_funnel_texts import *
from name_helper import extract_name_from_request, get_name_declensions_gpt, replace_pronouns_with_name
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = get_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(QUIZ_STATE, WAITING_FOR_PHOTO, WAITING_FOR_REQUEST, WAITING_FOR_NAME,
 WAITING_PAYMENT, PAID_USER, CHECKING_FREE_ACCESS) = range(7)


class UserSession:
    """–•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self):
        self.photo_path = None
        self.request_text = None
        self.username = None
        self.start_time = None
        self.quiz_answer = None
        self.payment_status = None  # None, 'pending', 'paid'
        self.funnel_stage = 'start'  # start, quiz, about, examples, pricing, paid
        self.last_funnel_message_time = None
        self.scans_count = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        self.subscription_type = None  # '1scan', '3scans', 'year', 'vip'


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}


# ===== –í–û–†–û–ù–ö–ê –ü–†–û–î–ê–ñ =====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏-–∫–≤–∏–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name or "–î—Ä—É–≥"
    telegram_username = update.effective_user.username
    last_name = update.effective_user.last_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º deep link –ø–∞—Ä–∞–º–µ—Ç—Ä
    start_param = context.args[0] if context.args else None

    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    if start_param == 'checkdostup':
        await update.message.reply_text(CHECK_ACCESS_START, parse_mode='HTML')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        user_sessions[user_id] = UserSession()
        user_sessions[user_id].username = username
        user_sessions[user_id].funnel_stage = 'check_access'

        return CHECKING_FREE_ACCESS

    # –ï—Å–ª–∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –æ–ø–ª–∞—Ç—ã
    if start_param == 'freescan':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db.create_or_update_user(
            user_id=user_id,
            username=telegram_username,
            first_name=username,
            last_name=last_name
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
        user_sessions[user_id] = UserSession()
        user_sessions[user_id].username = username
        user_sessions[user_id].payment_status = 'free'
        user_sessions[user_id].scans_count = 999  # –ë–µ–∑–ª–∏–º–∏—Ç
        user_sessions[user_id].funnel_stage = 'free_access'

        await update.message.reply_text(
            "üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ (—Å–µ–ª—Ñ–∏ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –∏–ª–∏ –ø–æ—Ä—Ç—Ä–µ—Ç), "
            "–∏ —è –ø—Ä–æ–≤–µ–¥—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ç–≤–æ–µ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è üí´",
            parse_mode='HTML'
        )

        return WAITING_FOR_PHOTO

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.create_or_update_user(
        user_id=user_id,
        username=telegram_username,
        first_name=username,
        last_name=last_name
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    user_sessions[user_id] = UserSession()
    user_sessions[user_id].username = username
    user_sessions[user_id].start_time = time.time()
    user_sessions[user_id].last_funnel_message_time = datetime.now()
    user_sessions[user_id].funnel_stage = 'welcome'

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–±–µ–∑ –∫–≤–∏–∑–∞)
    keyboard = [
        [InlineKeyboardButton("–î–∞, —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='goto_pricing')],
        [InlineKeyboardButton("–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data='about_scanner')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup, parse_mode='HTML')

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–æ–∂–∏–º–æ–≤
    asyncio.create_task(schedule_followups(user_id, context))

    return QUIZ_STATE


async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    quiz_choice = query.data.replace('quiz_', '')

    if user_id in user_sessions:
        user_sessions[user_id].quiz_answer = quiz_choice
        user_sessions[user_id].funnel_stage = 'quiz_result'

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    await query.message.reply_text(
        QUIZ_EXAMPLES[quiz_choice],
        parse_mode='HTML'
    )

    # TODO: –ó–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä PDF –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä—ã
    # await query.message.reply_document(...)

    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é
    keyboard = [[InlineKeyboardButton("‚ú® –£–∑–Ω–∞—Ç—å –ø—Ä–æ –°–∫–∞–Ω–µ—Ä –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data='show_welcome')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        "–•–æ—á–µ—à—å —Ç–∞–∫–æ–π –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç? üëá",
        reply_markup=reply_markup
    )

    return QUIZ_STATE


async def show_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id in user_sessions:
        user_sessions[user_id].funnel_stage = 'welcome'

    keyboard = [
        [InlineKeyboardButton("–î–∞, —Ö–æ—á—É –ø—Ä–æ–π—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='goto_pricing')],
        [InlineKeyboardButton("–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data='about_scanner')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup, parse_mode='HTML')
    return QUIZ_STATE


async def about_scanner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∞–Ω–µ—Ä–µ"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id in user_sessions:
        user_sessions[user_id].funnel_stage = 'about'

    # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ 7 —á–∞–∫—Ä–∞–º
    # await query.message.reply_photo(photo=open('chakras_photo.jpg', 'rb'))

    keyboard = [
        [InlineKeyboardButton("üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data='show_examples')],
        [InlineKeyboardButton("‚ö° –ü—Ä–æ–π—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='goto_pricing')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(ABOUT_SCANNER, reply_markup=reply_markup, parse_mode='HTML')
    return QUIZ_STATE


async def show_examples(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id in user_sessions:
        user_sessions[user_id].funnel_stage = 'examples'

    # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—ã –ø—Ä–∏–º–µ—Ä–æ–≤
    # await query.message.reply_photo(photo=open('example1.jpg', 'rb'))
    # await query.message.reply_photo(photo=open('example2.jpg', 'rb'))
    # await query.message.reply_photo(photo=open('example3.jpg', 'rb'))

    keyboard = [[InlineKeyboardButton("‚ú® –•–æ—á—É —Å–≤–æ—ë —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='goto_pricing')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_message = f"{EXAMPLES_MESSAGE}\n\n–ì–æ—Ç–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—ë? üëá"
    await query.message.reply_text(full_message, reply_markup=reply_markup, parse_mode='HTML')
    return QUIZ_STATE


async def show_pricing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id in user_sessions:
        user_sessions[user_id].funnel_stage = 'pricing'

    # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞—é—â—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
    # await query.message.reply_photo(photo=open('pricing_presentation.jpg', 'rb'))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tarif1_url = f"https://lizaperman.online/scaner_fullpay_tarif1?tg_id={user_id}"
    tarif2_url = f"https://lizaperman.online/scaner_fullpay_tarif2?tg_id={user_id}"
    tarif3_url = f"https://lizaperman.online/scaner_fullpay_tarif3?tg_id={user_id}"
    tarif4_url = f"https://lizaperman.online/scaner_fullpay_tarif4?tg_id={user_id}"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    keyboard = [
        [InlineKeyboardButton("üíé –¢–∞—Ä–∏—Ñ 1 - –û–ø–ª–∞—Ç–∏—Ç—å", url=tarif1_url)],
        [InlineKeyboardButton("‚ú® –¢–∞—Ä–∏—Ñ 2 - –û–ø–ª–∞—Ç–∏—Ç—å", url=tarif2_url)],
        [InlineKeyboardButton("üåü –¢–∞—Ä–∏—Ñ 3 - –û–ø–ª–∞—Ç–∏—Ç—å", url=tarif3_url)],
        [InlineKeyboardButton("üî• –¢–∞—Ä–∏—Ñ 4 - –û–ø–ª–∞—Ç–∏—Ç—å", url=tarif4_url)],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data='about_scanner')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        PRICING_MESSAGE,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    return WAITING_PAYMENT


async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π)"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # TODO: –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    # payment_verified = check_payment_api(user_id)

    # –í—Ä–µ–º–µ–Ω–Ω–æ: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –¥–∞—ë–º –¥–æ—Å—Ç—É–ø —Å—Ä–∞–∑—É
    # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tinkoff/Yookassa/Stripe

    await query.message.reply_text(
        "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã."
    )

    # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await asyncio.sleep(2)

    # –í–†–ï–ú–ï–ù–ù–û: –¥–∞—ë–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    payment_verified = True

    if payment_verified:
        user_sessions[user_id].payment_status = 'paid'
        user_sessions[user_id].funnel_stage = 'paid'
        user_sessions[user_id].scans_count = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å scans_count

        await query.message.reply_text(
            AFTER_PAYMENT.format(channel_link=CHANNEL_LINK),
            parse_mode='HTML'
        )

        return WAITING_FOR_PHOTO
    else:
        keyboard = [[InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='check_payment')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å:\n"
            "1. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n"
            "2. –ü—Ä–æ—à–ª–æ 1-2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n\n"
            "–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∏–ª–∞, –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É:",
            reply_markup=reply_markup
        )

        return WAITING_PAYMENT


# ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –î–û–ñ–ò–ú–´ =====

async def schedule_followups(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–æ–∂–∏–º–æ–≤"""

    # –î–æ–∂–∏–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    await asyncio.sleep(24 * 60 * 60)

    if user_id in user_sessions:
        session = user_sessions[user_id]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª
        if session.payment_status != 'paid':
            keyboard = [[InlineKeyboardButton("üëâ –ü—Ä–æ–π—Ç–∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–π—á–∞—Å", callback_data='goto_pricing')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=FOLLOWUP_24H,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∂–∏–º–∞ 24—á –¥–ª—è {user_id}: {e}")

    # –î–æ–∂–∏–º —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤
    await asyncio.sleep(24 * 60 * 60)

    if user_id in user_sessions:
        session = user_sessions[user_id]

        if session.payment_status != 'paid':
            keyboard = [[InlineKeyboardButton("üëâ –ù–∞—á–∞—Ç—å –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='goto_pricing')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=FOLLOWUP_48H,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∂–∏–º–∞ 48—á –¥–ª—è {user_id}: {e}")

    # –î–æ–∂–∏–º —á–µ—Ä–µ–∑ 72 —á–∞—Å–∞
    await asyncio.sleep(24 * 60 * 60)

    if user_id in user_sessions:
        session = user_sessions[user_id]

        if session.payment_status != 'paid':
            keyboard = [[InlineKeyboardButton("üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ –°–∫–∞–Ω–µ—Ä—É –ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è", callback_data='goto_pricing')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=FOLLOWUP_72H,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∂–∏–º–∞ 72—á –¥–ª—è {user_id}: {e}")


# ===== –†–ê–ë–û–¢–ê –°–û –°–ö–ê–ù–ï–†–û–ú (–¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö) =====

async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã (—Ä–∞–∑—Ä–µ—à–∞–µ–º 'paid' –∏ 'free')
    if user_id not in user_sessions or user_sessions[user_id].payment_status not in ['paid', 'free']:
        keyboard = [[InlineKeyboardButton("üí´ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='goto_pricing')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –°–∫–∞–Ω–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø üåø",
            reply_markup=reply_markup
        )
        return QUIZ_STATE

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    if user_sessions[user_id].scans_count <= 0:
        await update.message.reply_text(
            "–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è üòî\n"
            "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."
        )
        keyboard = [[InlineKeyboardButton("üí´ –ö—É–ø–∏—Ç—å –µ—â—ë", url=PAYMENT_URL)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∞—Ä–∏—Ñ–∞–º:", reply_markup=reply_markup)
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo_file = await update.message.photo[-1].get_file()

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('user_photos', exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_path = f'user_photos/{user_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.jpg'
    await photo_file.download_to_drive(photo_path)

    user_sessions[user_id].photo_path = photo_path

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ (caption)
    caption = update.message.caption
    if caption and len(caption.strip()) > 10:
        user_sessions[user_id].request_text = caption.strip()

        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ –ø–æ–¥–ø–∏—Å–∏
        extracted_name = extract_name_from_request(caption.strip())

        if extracted_name:
            # –ò–º—è –Ω–∞–π–¥–µ–Ω–æ - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            user_sessions[user_id].username = extracted_name
            logger.info(f"‚úÖ –ò–º—è –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ: {extracted_name}")

            processing_msg = await update.message.reply_text(
                "‚è≥ –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑...\n"
                "–≠—Ç–æ –∑–∞–π–º—ë—Ç 2-3 –º–∏–Ω—É—Ç—ã.\n"
                "–Ø –ø—Ä–æ—Ö–æ–∂—É —á–µ—Ä–µ–∑ 5 —ç—Ç–∞–ø–æ–≤: –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Üí —Ä–æ–¥ ‚Üí —á–∞–∫—Ä—ã ‚Üí —Ñ—Ä–∞–∑—ã ‚Üí –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ üîÆ‚ú®"
            )

            return await process_analysis(update, context, processing_msg)
        else:
            # –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
            await update.message.reply_text(
                "–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, –î–º–∏—Ç—Ä–∏–π, –ú–∞—Ä–∏—è"
            )
            return WAITING_FOR_NAME
    else:
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. ‚ú®\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤, —Ö–æ—á—É –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞\n"
            "‚Ä¢ –•–æ—á—É –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n"
            "‚Ä¢ –•–æ—á—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±–æ—è—Ç—å—Å—è –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –ø—É–±–ª–∏—á–Ω–æ\n"
            "‚Ä¢ –ß—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –º–æ–π –±–∏–∑–Ω–µ—Å/–∑–¥–æ—Ä–æ–≤—å–µ/—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ?"
        )
        return WAITING_FOR_REQUEST


async def receive_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏"""
    user_id = update.effective_user.id

    if user_id not in user_sessions or not user_sessions[user_id].photo_path:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ! –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return ConversationHandler.END

    user_sessions[user_id].request_text = update.message.text

    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    extracted_name = extract_name_from_request(update.message.text)

    if extracted_name:
        # –ò–º—è –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ
        user_sessions[user_id].username = extracted_name
        logger.info(f"‚úÖ –ò–º—è –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {extracted_name}")
        return await start_analysis(update, context, user_id)
    else:
        # –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
        await update.message.reply_text(
            "–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, –î–º–∏—Ç—Ä–∏–π, –ú–∞—Ä–∏—è"
        )
        return WAITING_FOR_NAME


async def handle_text_without_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id

    if user_id in user_sessions:
        user_sessions[user_id].request_text = update.message.text

        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        extracted_name = extract_name_from_request(update.message.text)

        if extracted_name:
            # –ò–º—è –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ
            user_sessions[user_id].username = extracted_name
            logger.info(f"‚úÖ –ò–º—è –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {extracted_name}")
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. ‚ú®\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
        else:
            # –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
            await update.message.reply_text(
                "–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, –î–º–∏—Ç—Ä–∏–π, –ú–∞—Ä–∏—è"
            )
            return WAITING_FOR_NAME
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END

    return WAITING_FOR_PHOTO


async def handle_photo_after_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = update.effective_user.id

    if user_id not in user_sessions or not user_sessions[user_id].request_text:
        await update.message.reply_text(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ —Å /start"
        )
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo_file = await update.message.photo[-1].get_file()
    os.makedirs('user_photos', exist_ok=True)
    photo_path = f'user_photos/{user_id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.jpg'
    await photo_file.download_to_drive(photo_path)

    user_sessions[user_id].photo_path = photo_path

    processing_msg = await update.message.reply_text(
        "‚è≥ –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑...\n"
        "–≠—Ç–æ –∑–∞–π–º—ë—Ç 2-3 –º–∏–Ω—É—Ç—ã.\n"
        "–Ø –ø—Ä–æ—Ö–æ–∂—É —á–µ—Ä–µ–∑ 5 —ç—Ç–∞–ø–æ–≤: –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Üí —Ä–æ–¥ ‚Üí —á–∞–∫—Ä—ã ‚Üí —Ñ—Ä–∞–∑—ã ‚Üí –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ üîÆ‚ú®"
    )

    return await process_analysis(update, context, processing_msg)


async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    if user_id not in user_sessions:
        await update.message.reply_text(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è (–±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ)
    name = update.message.text.strip().split()[0]
    user_sessions[user_id].username = name
    logger.info(f"‚úÖ –ò–º—è –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ: {name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–æ—Ç–æ
    if user_sessions[user_id].photo_path:
        # –§–æ—Ç–æ —É–∂–µ –µ—Å—Ç—å - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        return await start_analysis(update, context, user_id)
    else:
        # –§–æ—Ç–æ –µ—â—ë –Ω–µ—Ç - –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. ‚ú®"
        )
        return WAITING_FOR_PHOTO


async def start_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> int:
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
    processing_msg = await update.message.reply_text(
        "‚è≥ –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑...\n"
        "–≠—Ç–æ –∑–∞–π–º—ë—Ç 2-3 –º–∏–Ω—É—Ç—ã.\n"
        "–Ø –ø—Ä–æ—Ö–æ–∂—É —á–µ—Ä–µ–∑ 5 —ç—Ç–∞–ø–æ–≤: –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Üí —Ä–æ–¥ ‚Üí —á–∞–∫—Ä—ã ‚Üí —Ñ—Ä–∞–∑—ã ‚Üí –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ üîÆ‚ú®"
    )

    return await process_analysis(update, context, processing_msg)


async def process_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, processing_msg) -> int:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    user_id = update.effective_user.id

    try:
        start_time = time.time()

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π
        logger.info(f"üìù –ü–æ–ª—É—á–∞—é —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∏–º–µ–Ω–∏: {user_sessions[user_id].username}")
        name_declensions = get_name_declensions_gpt(user_sessions[user_id].username)
        user_sessions[user_id].name_declensions = name_declensions
        logger.info(f"‚úÖ –°–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: {name_declensions}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_result, usage_info = await analyze_with_metamethod(
            user_sessions[user_id].request_text,
            user_sessions[user_id].username
        )

        # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–º–µ–Ω–∏
        logger.info("üîÑ –ó–∞–º–µ–Ω—è—é –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ –∏–º—è...")
        analysis_result = replace_pronouns_with_name(analysis_result, name_declensions)

        processing_time = int(time.time() - start_time)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        safe_filename = f"analysis_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        pdf_path = generate_pdf(
            analysis_result,
            user_sessions[user_id].username,
            output_path=safe_filename
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        analysis_id = db.save_analysis(
            user_id=user_id,
            photo_path=user_sessions[user_id].photo_path,
            request_text=user_sessions[user_id].request_text,
            analysis_result=analysis_result,
            pdf_path=pdf_path,
            processing_time=processing_time,
            tokens_used=usage_info["total_tokens"],
            api_cost_usd=usage_info["cost_usd"],
            model_used=OPENAI_MODEL
        )

        db.save_photo_base64(analysis_id, user_sessions[user_id].photo_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        with open(pdf_path, 'rb') as pdf_file:
            await update.message.reply_document(
                document=pdf_file,
                filename=f"–°–∫–∞–Ω–µ—Ä_–ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è_{user_sessions[user_id].username}.pdf",
                caption="‚ú® –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –°–∫–∞–Ω–µ—Ä –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è –≥–æ—Ç–æ–≤!\n\n"
                        "–†–∞–±–æ—Ç–∞–π —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üôè"
            )

        await processing_msg.delete()

        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        user_sessions[user_id].scans_count -= 1

        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
        try:
            if os.path.exists(user_sessions[user_id].photo_path):
                os.remove(user_sessions[user_id].photo_path)
            if os.path.exists(pdf_path):
                os.remove(pdf_path)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        remaining = user_sessions[user_id].scans_count
        if remaining > 0:
            keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="new_analysis")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n"
                f"–•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –µ—â—ë –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑?",
                reply_markup=reply_markup
            )

            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ #{analysis_id} –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {user_id} –∑–∞ {processing_time}—Å")
            # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–ª–∞
            return WAITING_FOR_PHOTO
        else:
            keyboard = [[InlineKeyboardButton("üí´ –ö—É–ø–∏—Ç—å –µ—â—ë —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", url=PAYMENT_URL)]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "–≠—Ç–æ –±—ã–ª–æ —Ç–≤–æ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ üåø\n"
                "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:",
                reply_markup=reply_markup
            )

            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ #{analysis_id} –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {user_id} –∑–∞ {processing_time}—Å. –°–∫–∞–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥, —Ç–∞–∫ –∫–∞–∫ —Å–∫–∞–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error during analysis: {e}")
        await processing_msg.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ /start\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        return ConversationHandler.END


# ===== –ü–†–û–í–ï–†–ö–ê –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –î–û–°–¢–£–ü–ê =====

async def check_free_access_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    user_id = update.effective_user.id
    email = update.message.text.strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
    checking_msg = await update.message.reply_text(CHECK_ACCESS_VERIFYING)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ë–î
        import psycopg2
        from config import POSTGRES_HOST, POSTGRES_PORT, POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD

        conn = psycopg2.connect(
            host=POSTGRES_HOST,
            port=POSTGRES_PORT,
            database=POSTGRES_DB,
            user=POSTGRES_USER,
            password=POSTGRES_PASSWORD
        )
        cursor = conn.cursor()

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        cursor.execute("SELECT * FROM metaliza_check_free_access(%s)", (email,))
        result = cursor.fetchone()

        has_access, date_end, days_remaining = result

        if has_access:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT metaliza_activate_free_access(%s, %s)", (email, user_id))
            activated = cursor.fetchone()[0]
            conn.commit()

            if activated:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_end_formatted = date_end.strftime('%d.%m.%Y')

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç "–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã" –∏–∑ AFTER_PAYMENT
                after_payment_text = AFTER_PAYMENT.format(channel_link=CHANNEL_LINK).split('\n\n', 1)[1]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                await checking_msg.edit_text(
                    CHECK_ACCESS_GRANTED.format(
                        date_end=date_end_formatted,
                        days_remaining=days_remaining,
                        after_payment_text=after_payment_text
                    ),
                    parse_mode='HTML'
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
                if user_id in user_sessions:
                    user_sessions[user_id].payment_status = 'paid'
                    user_sessions[user_id].scans_count = 999999  # –ë–µ–∑–ª–∏–º–∏—Ç
                    user_sessions[user_id].subscription_type = 'free'

                cursor.close()
                conn.close()

                return WAITING_FOR_PHOTO
            else:
                # –î–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ
                cursor.close()
                conn.close()

                keyboard = [[InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É", callback_data='retry_email')]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await checking_msg.edit_text(
                    "‚ö†Ô∏è –≠—Ç–æ—Ç –¥–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ",
                    reply_markup=reply_markup
                )
                return CHECKING_FREE_ACCESS
        else:
            # –î–æ—Å—Ç—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω
            cursor.close()
            conn.close()

            keyboard = [[InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data='retry_email')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await checking_msg.edit_text(
                CHECK_ACCESS_NOT_FOUND,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return CHECKING_FREE_ACCESS

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
        await checking_msg.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        return ConversationHandler.END


async def retry_email_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å email"""
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(CHECK_ACCESS_START, parse_mode='HTML')
    return CHECKING_FREE_ACCESS


async def handle_checkdostup_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è 'checkdostup'"""
    text = update.message.text.strip().lower()

    if text == 'checkdostup':
        user_id = update.effective_user.id
        username = update.effective_user.first_name or "–î—Ä—É–≥"

        await update.message.reply_text(CHECK_ACCESS_START, parse_mode='HTML')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        if user_id not in user_sessions:
            user_sessions[user_id] = UserSession()

        user_sessions[user_id].username = username
        user_sessions[user_id].funnel_stage = 'check_access'

        return CHECKING_FREE_ACCESS

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ checkdostup, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –¥—Ä—É–∂–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã—à–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ üëÜ",
        parse_mode='HTML'
    )
    return QUIZ_STATE


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith('quiz_'):
        return await handle_quiz_answer(update, context)
    elif query.data == 'show_welcome':
        return await show_welcome(update, context)
    elif query.data == 'about_scanner':
        return await about_scanner(update, context)
    elif query.data == 'show_examples':
        return await show_examples(update, context)
    elif query.data == 'goto_pricing':
        return await show_pricing(update, context)
    elif query.data == 'check_payment':
        return await check_payment(update, context)
    elif query.data == 'retry_email':
        return await retry_email_input(update, context)
    elif query.data == "new_analysis":
        await query.answer()
        user_id = query.from_user.id
        username = query.from_user.first_name or "–î—Ä—É–≥"

        if user_id in user_sessions:
            user_sessions[user_id].photo_path = None
            user_sessions[user_id].request_text = None
            user_sessions[user_id].username = None

        await query.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω—ë–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑. üåü\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å."
        )
        return WAITING_FOR_PHOTO

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
    )
    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
        ],
        states={
            QUIZ_STATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_checkdostup_text),
                CallbackQueryHandler(button_callback),
            ],
            CHECKING_FREE_ACCESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, check_free_access_email),
                CallbackQueryHandler(button_callback),
            ],
            WAITING_FOR_PHOTO: [
                MessageHandler(filters.PHOTO, receive_photo),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_without_photo),
                CallbackQueryHandler(button_callback),
            ],
            WAITING_FOR_REQUEST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_request),
                MessageHandler(filters.PHOTO, handle_photo_after_request),
            ],
            WAITING_FOR_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name),
                MessageHandler(filters.PHOTO, handle_photo_after_request),
            ],
            WAITING_PAYMENT: [
                CallbackQueryHandler(button_callback),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)

    logger.info("ü§ñ –ú–µ—Ç–∞ –õ–∏–∑–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å –≤–æ—Ä–æ–Ω–∫–æ–π –ø—Ä–æ–¥–∞–∂!")
    logger.info(f"üìä –ú–æ–¥–µ–ª—å: {OPENAI_MODEL}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
