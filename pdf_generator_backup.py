"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Å–∏–≤—ã—Ö PDF –æ—Ç—á–µ—Ç–æ–≤ —Å —Ñ–æ–Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
"""

import os
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.lib.enums import TA_LEFT, TA_CENTER
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Image as RLImage
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import re


def replace_emoji_for_pdf(text):
    """–ó–∞–º–µ–Ω–∞ —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF"""
    emoji_map = {
        # –í–ê–ñ–ù–û: üü¢üü†üî¥ –ù–ï –∑–∞–º–µ–Ω—è–µ–º - —ç—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —á–∞–∫—Ä!
        # 'üî¥': '[1]',  # –£–±—Ä–∞–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —á–∞–∫—Ä
        # 'üü†': '[2]',  # –£–±—Ä–∞–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —á–∞–∫—Ä
        'üü°': '[3]',
        'üíö': '[4]',
        'üíô': '[5]',
        'üíú': '[6]',
        'ü§ç': '[7]',
        '‚ú®': '*',
        'üîÆ': '~',
        'üåø': '~',
        'üí´': '*',
        'üïä': '~',
        'üå∏': '~',
        'üîπ': '‚Ä¢',
    }

    for emoji, replacement in emoji_map.items():
        text = text.replace(emoji, replacement)

    return text


def register_fonts():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"""
    try:
        # –î–ª—è Linux —Å–µ—Ä–≤–µ—Ä–∞
        pdfmetrics.registerFont(TTFont('DejaVuSans', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf'))
        pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', '/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf'))
        return True
    except:
        return False


def add_background(canvas, doc, background_path):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    if background_path and os.path.exists(background_path):
        canvas.saveState()
        page_width, page_height = A4
        canvas.drawImage(
            background_path,
            0, 0,
            width=page_width,
            height=page_height,
            preserveAspectRatio=False
        )
        canvas.restoreState()


def create_custom_styles(has_custom_fonts=False):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    styles = getSampleStyleSheet()

    font_name = 'DejaVuSans' if has_custom_fonts else 'Helvetica'
    font_name_bold = 'DejaVuSans-Bold' if has_custom_fonts else 'Helvetica-Bold'

    # –¢–µ–º–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ö–æ—Ä–æ—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    title_color = colors.HexColor('#8B4F62')  # –¢–µ–º–Ω–æ-—Ä–æ–∑–æ–≤—ã–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    heading_color = colors.HexColor('#6B3D4F')  # –ï—â–µ —Ç–µ–º–Ω–µ–µ –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    body_color = colors.HexColor('#2D2327')  # –ü–æ—á—Ç–∏ —á–µ—Ä–Ω—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞

    # –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
    styles.add(ParagraphStyle(
        name='CustomTitle',
        parent=styles['Heading1'],
        fontName=font_name_bold,
        fontSize=20,
        textColor=title_color,
        spaceAfter=20,
        spaceBefore=40,
        alignment=TA_CENTER,
        leading=24
    ))

    # –°—Ç–∏–ª—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
    styles.add(ParagraphStyle(
        name='CustomHeading',
        parent=styles['Heading2'],
        fontName=font_name_bold,
        fontSize=13,
        textColor=heading_color,
        spaceAfter=10,
        spaceBefore=14,
        leading=16,
        keepWithNext=True
    ))

    # –°—Ç–∏–ª—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    styles.add(ParagraphStyle(
        name='CustomBody',
        parent=styles['BodyText'],
        fontName=font_name,
        fontSize=10,
        textColor=body_color,
        spaceAfter=8,
        leading=14,
        alignment=TA_LEFT
    ))

    # –°—Ç–∏–ª—å –∑–∞–ø—Ä–æ—Å–∞
    styles.add(ParagraphStyle(
        name='RequestStyle',
        parent=styles['BodyText'],
        fontName=font_name,
        fontSize=11,
        textColor=colors.HexColor('#6B3D4F'),
        spaceAfter=16,
        spaceBefore=10,
        leading=15,
        alignment=TA_CENTER
    ))

    return styles


def generate_pdf(analysis_text, username, output_path='analysis.pdf', background_path='pdf_background.png'):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π PDF –æ—Ç—á–µ—Ç —Å —Ñ–æ–Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º

    Args:
        analysis_text: —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        username: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        output_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
        background_path: –ø—É—Ç—å –∫ —Ñ–æ–Ω–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    """

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
    has_fonts = register_fonts()

    # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    analysis_text = replace_emoji_for_pdf(analysis_text)

    # –°–æ–∑–¥–∞–µ–º PDF —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
    doc = SimpleDocTemplate(
        output_path,
        pagesize=A4,
        rightMargin=2*cm,
        leftMargin=2*cm,
        topMargin=6*cm,
        bottomMargin=3*cm
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏
    styles = create_custom_styles(has_fonts)

    # –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    story = []

    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    lines = analysis_text.strip().split('\n')

    for line in lines:
        line = line.strip()

        if not line:
            story.append(Spacer(1, 0.3*cm))
            continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–°–∫–∞–Ω–µ—Ä –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è" - –æ–Ω —É–∂–µ –Ω–∞ —Ñ–æ–Ω–µ
        if '–°–∫–∞–Ω–µ—Ä –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è' in line or '‚ú®' in line:
            continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –§–û–†–ú–ê–¢
        if "–§–û–†–ú–ê–¢:" in line:
            continue

        # –ó–∞–ø—Ä–æ—Å
        if line.startswith("üîπ") and "–ó–∞–ø—Ä–æ—Å:" in line:
            clean_line = line.replace("üîπ", "").replace("**", "").strip()
            story.append(Paragraph(clean_line, styles["CustomHeading"]))
            continue
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ (—Å –Ω–æ–º–µ—Ä–∞–º–∏)
        elif re.match(r'^\*?\*?\d+\.', line) or line.startswith('**'):
            clean_line = line.replace('**', '').strip()
            
            # –†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ü–ï–†–ï–î 5-–º —Ä–∞–∑–¥–µ–ª–æ–º (–Ω–æ –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–±–∞–≤–∏–º)
            if clean_line.startswith('5.'):
                story.append(PageBreak())
            
            story.append(Paragraph(clean_line, styles['CustomHeading']))

        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
            if line.startswith('‚Äî') or line.startswith('-') or line.startswith('‚Ä¢'):
                clean_line = '  ' + line
            else:
                clean_line = line

            # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã ‚óè –≤ –ª–µ–≥–µ–Ω–¥–µ —á–∞–∫—Ä
            if '‚óè 90-100%' in clean_line:
                clean_line = clean_line.replace('‚óè', '<font color="#00C851">‚óè</font>')  # –ó–µ–ª—ë–Ω—ã–π
            elif '‚óè 65-89%' in clean_line:
                clean_line = clean_line.replace('‚óè', '<font color="#FF8800">‚óè</font>')  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            elif '‚óè –º–µ–Ω–µ–µ 65%' in clean_line:
                clean_line = clean_line.replace('‚óè', '<font color="#FF4444">‚óè</font>')  # –ö—Ä–∞—Å–Ω—ã–π

            # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã ‚óè –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ä–∞–∑–±–æ—Ä–µ —á–∞–∫—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
            elif line.startswith('‚óè') and '%' in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ (re —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)
                percent_match = re.search(r'(\d+)%', line)
                if percent_match:
                    percent = int(percent_match.group(1))
                    if percent >= 90:
                        clean_line = clean_line.replace('‚óè', '<font color="#00C851">‚óè</font>', 1)  # –ó–µ–ª—ë–Ω—ã–π
                    elif percent >= 65:
                        clean_line = clean_line.replace('‚óè', '<font color="#FF8800">‚óè</font>', 1)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    else:
                        clean_line = clean_line.replace('‚óè', '<font color="#FF4444">‚óè</font>', 1)  # –ö—Ä–∞—Å–Ω—ã–π

            story.append(Paragraph(clean_line, styles['CustomBody']))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä —Å –¥–∞—Ç–æ–π
    story.append(Spacer(1, 1*cm))
    footer_text = f"<font size=8 color='#6B3D4F'>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {datetime.now().strftime('%d.%m.%Y')}</font>"
    footer = Paragraph(footer_text, styles['CustomBody'])
    story.append(footer)

    # –°–æ–∑–¥–∞–µ–º PDF —Å —Ñ–æ–Ω–æ–º –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    doc.build(
        story,
        onFirstPage=lambda c, d: add_background(c, d, background_path),
        onLaterPages=lambda c, d: add_background(c, d, background_path)
    )

    return output_path
